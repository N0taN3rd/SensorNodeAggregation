#
# This class is automatically generated by mig. DO NOT EDIT THIS FILE.
# This class implements a Python interface to the 'reportMsg'
# message type.
#

import tinyos.message.Message

# The default size of this message type in bytes.
DEFAULT_MESSAGE_SIZE = 13

# The Active Message type associated with this message.
AM_TYPE = 8

class reportMsg(tinyos.message.Message.Message):
    # Create a new reportMsg of size 13.
    def __init__(self, data="", addr=None, gid=None, base_offset=0, data_length=13):
        tinyos.message.Message.Message.__init__(self, data, addr, gid, base_offset, data_length)
        self.amTypeSet(AM_TYPE)
    
    # Get AM_TYPE
    def get_amType(cls):
        return AM_TYPE
    
    get_amType = classmethod(get_amType)
    
    #
    # Return a String representation of this message. Includes the
    # message type name and the non-indexed field values.
    #
    def __str__(self):
        s = "Message <reportMsg> \n"
        try:
            s += "  [consensus=0x%x]\n" % (self.get_consensus())
        except:
            pass
        try:
            s += "  [tVal=0x%x]\n" % (self.get_tVal())
        except:
            pass
        try:
            s += "  [lVal=0x%x]\n" % (self.get_lVal())
        except:
            pass
        try:
            s += "  [exceeds=0x%x]\n" % (self.get_exceeds())
        except:
            pass
        try:
            s += "  [offenfdVal=0x%x]\n" % (self.get_offenfdVal())
        except:
            pass
        try:
            s += "  [tStamp=0x%x]\n" % (self.get_tStamp())
        except:
            pass
        return s

    # Message-type-specific access methods appear below.

    #
    # Accessor methods for field: consensus
    #   Field type: short
    #   Offset (bits): 0
    #   Size (bits): 8
    #

    #
    # Return whether the field 'consensus' is signed (False).
    #
    def isSigned_consensus(self):
        return False
    
    #
    # Return whether the field 'consensus' is an array (False).
    #
    def isArray_consensus(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'consensus'
    #
    def offset_consensus(self):
        return (0 / 8)
    
    #
    # Return the offset (in bits) of the field 'consensus'
    #
    def offsetBits_consensus(self):
        return 0
    
    #
    # Return the value (as a short) of the field 'consensus'
    #
    def get_consensus(self):
        return self.getUIntElement(self.offsetBits_consensus(), 8, 1)
    
    #
    # Set the value of the field 'consensus'
    #
    def set_consensus(self, value):
        self.setUIntElement(self.offsetBits_consensus(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'consensus'
    #
    def size_consensus(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'consensus'
    #
    def sizeBits_consensus(self):
        return 8
    
    #
    # Accessor methods for field: tVal
    #   Field type: int
    #   Offset (bits): 8
    #   Size (bits): 16
    #

    #
    # Return whether the field 'tVal' is signed (False).
    #
    def isSigned_tVal(self):
        return False
    
    #
    # Return whether the field 'tVal' is an array (False).
    #
    def isArray_tVal(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'tVal'
    #
    def offset_tVal(self):
        return (8 / 8)
    
    #
    # Return the offset (in bits) of the field 'tVal'
    #
    def offsetBits_tVal(self):
        return 8
    
    #
    # Return the value (as a int) of the field 'tVal'
    #
    def get_tVal(self):
        return self.getUIntElement(self.offsetBits_tVal(), 16, 1)
    
    #
    # Set the value of the field 'tVal'
    #
    def set_tVal(self, value):
        self.setUIntElement(self.offsetBits_tVal(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'tVal'
    #
    def size_tVal(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'tVal'
    #
    def sizeBits_tVal(self):
        return 16
    
    #
    # Accessor methods for field: lVal
    #   Field type: int
    #   Offset (bits): 24
    #   Size (bits): 16
    #

    #
    # Return whether the field 'lVal' is signed (False).
    #
    def isSigned_lVal(self):
        return False
    
    #
    # Return whether the field 'lVal' is an array (False).
    #
    def isArray_lVal(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'lVal'
    #
    def offset_lVal(self):
        return (24 / 8)
    
    #
    # Return the offset (in bits) of the field 'lVal'
    #
    def offsetBits_lVal(self):
        return 24
    
    #
    # Return the value (as a int) of the field 'lVal'
    #
    def get_lVal(self):
        return self.getUIntElement(self.offsetBits_lVal(), 16, 1)
    
    #
    # Set the value of the field 'lVal'
    #
    def set_lVal(self, value):
        self.setUIntElement(self.offsetBits_lVal(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'lVal'
    #
    def size_lVal(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'lVal'
    #
    def sizeBits_lVal(self):
        return 16
    
    #
    # Accessor methods for field: exceeds
    #   Field type: int
    #   Offset (bits): 40
    #   Size (bits): 16
    #

    #
    # Return whether the field 'exceeds' is signed (False).
    #
    def isSigned_exceeds(self):
        return False
    
    #
    # Return whether the field 'exceeds' is an array (False).
    #
    def isArray_exceeds(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'exceeds'
    #
    def offset_exceeds(self):
        return (40 / 8)
    
    #
    # Return the offset (in bits) of the field 'exceeds'
    #
    def offsetBits_exceeds(self):
        return 40
    
    #
    # Return the value (as a int) of the field 'exceeds'
    #
    def get_exceeds(self):
        return self.getUIntElement(self.offsetBits_exceeds(), 16, 1)
    
    #
    # Set the value of the field 'exceeds'
    #
    def set_exceeds(self, value):
        self.setUIntElement(self.offsetBits_exceeds(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'exceeds'
    #
    def size_exceeds(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'exceeds'
    #
    def sizeBits_exceeds(self):
        return 16
    
    #
    # Accessor methods for field: offenfdVal
    #   Field type: int
    #   Offset (bits): 56
    #   Size (bits): 16
    #

    #
    # Return whether the field 'offenfdVal' is signed (False).
    #
    def isSigned_offenfdVal(self):
        return False
    
    #
    # Return whether the field 'offenfdVal' is an array (False).
    #
    def isArray_offenfdVal(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'offenfdVal'
    #
    def offset_offenfdVal(self):
        return (56 / 8)
    
    #
    # Return the offset (in bits) of the field 'offenfdVal'
    #
    def offsetBits_offenfdVal(self):
        return 56
    
    #
    # Return the value (as a int) of the field 'offenfdVal'
    #
    def get_offenfdVal(self):
        return self.getUIntElement(self.offsetBits_offenfdVal(), 16, 1)
    
    #
    # Set the value of the field 'offenfdVal'
    #
    def set_offenfdVal(self, value):
        self.setUIntElement(self.offsetBits_offenfdVal(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'offenfdVal'
    #
    def size_offenfdVal(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'offenfdVal'
    #
    def sizeBits_offenfdVal(self):
        return 16
    
    #
    # Accessor methods for field: tStamp
    #   Field type: long
    #   Offset (bits): 72
    #   Size (bits): 32
    #

    #
    # Return whether the field 'tStamp' is signed (False).
    #
    def isSigned_tStamp(self):
        return False
    
    #
    # Return whether the field 'tStamp' is an array (False).
    #
    def isArray_tStamp(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'tStamp'
    #
    def offset_tStamp(self):
        return (72 / 8)
    
    #
    # Return the offset (in bits) of the field 'tStamp'
    #
    def offsetBits_tStamp(self):
        return 72
    
    #
    # Return the value (as a long) of the field 'tStamp'
    #
    def get_tStamp(self):
        return self.getUIntElement(self.offsetBits_tStamp(), 32, 1)
    
    #
    # Set the value of the field 'tStamp'
    #
    def set_tStamp(self, value):
        self.setUIntElement(self.offsetBits_tStamp(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'tStamp'
    #
    def size_tStamp(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'tStamp'
    #
    def sizeBits_tStamp(self):
        return 32
    
